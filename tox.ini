[tox]
minversion = 3.18.0
envlist = py310,pep8
skipsdist = False
ignore_basepython_conflict = True

[testenv]
usedevelop = True
basepython = python3
setenv =
   OS_LOG_CAPTURE={env:OS_LOG_CAPTURE:true}
   OS_STDOUT_CAPTURE={env:OS_STDOUT_CAPTURE:true}
   OS_STDERR_CAPTURE={env:OS_STDERR_CAPTURE:true}
   PYTHONWARNINGS=default::DeprecationWarning
    OS_SAP_RELEASE=stable/2024.1-m3
deps = -c{env:TOX_CONSTRAINTS_FILE:https://raw.githubusercontent.com/sapcc/requirements/{env:OS_SAP_RELEASE}/upper-constraints.txt}
       -r{toxinidir}/requirements.txt
       -r{toxinidir}/test-requirements.txt
       git+https://github.com/sapcc/neutron@{env:OS_SAP_RELEASE}#egg=neutron
commands =
           stestr run {posargs}
           python {toxinidir}/tools/django-manage.py test bgpvpn_dashboard

[testenv:releasenotes]
deps = -c{env:TOX_CONSTRAINTS_FILE:https://raw.githubusercontent.com/sapcc/requirements/{env:OS_SAP_RELEASE}/upper-constraints.txt}
       -r{toxinidir}/doc/requirements.txt
commands = sphinx-build -W -a -E -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html

[testenv:pep8]
deps =
    {[testenv]deps}
commands =
    flake8
    flake8 doc/source/samples
    pylint --version
    pylint --rcfile=.pylintrc --output-format=colorized {posargs:networking_bgpvpn}
    pylint --rcfile=.pylintrc --output-format=colorized doc/source/samples
    neutron-db-manage --subproject networking-bgpvpn --database-connection sqlite:// check_migration
    {[testenv:genconfig]commands}
    {[testenv:genpolicy]commands}
allowlist_externals =
    {toxinidir}/tools/generate_config_file_samples.sh

[testenv:dsvm]
setenv = OS_FAIL_ON_MISSING_DEPS=1
         OS_LOG_PATH={env:OS_LOG_PATH:/opt/stack/logs}

[testenv:functional]
setenv = {[testenv]setenv}
         OS_TEST_TIMEOUT=180
         OS_TEST_PATH=./networking_bgpvpn/tests/functional
         OS_LOG_PATH={env:OS_LOG_PATH:/opt/stack/logs}
deps =
  {[testenv]deps}
  -r{toxinidir}/networking_bgpvpn/tests/functional/requirements.txt
commands = stestr run {posargs}

[testenv:dsvm-functional-gate]
setenv = {[testenv:functional]setenv}
         {[testenv:dsvm]setenv}
deps =
  {[testenv:functional]deps}
commands = stestr run {posargs}

[testenv:venv]
commands = {posargs}

[testenv:cover]
setenv =
    PYTHON = coverage run --source networking_bgpvpn --parallel-mode
commands =
    stestr run {posargs}
    coverage combine
    coverage html -d cover
    coverage xml -o cover/coverage.xml

[testenv:docs]
deps = -c{env:TOX_CONSTRAINTS_FILE:https://raw.githubusercontent.com/sapcc/requirements/{env:OS_SAP_RELEASE}/upper-constraints.txt}
       -r{toxinidir}/doc/requirements.txt
commands = sphinx-build -W -b html doc/source doc/build/html

[testenv:pdf-docs]
deps = {[testenv:docs]deps}
allowlist_externals =
  make
commands =
  sphinx-build -W -b latex doc/source doc/build/pdf
  make -C doc/build/pdf

[testenv:debug]
commands = oslo_debug_helper -t networking_bgpvpn/tests/unit {posargs}

[testenv:genconfig]
commands = {toxinidir}/tools/generate_config_file_samples.sh
allowlist_externals =
    {toxinidir}/tools/generate_config_file_samples.sh

[testenv:genpolicy]
commands = oslopolicy-sample-generator --config-file=etc/oslo-policy-generator/policy.conf

[flake8]
show-source = True
# N530 direct neutron imports not allowed
# W504 Line break occurred after a binary operator
# E126 continuation line over-indented for hanging indent
# E128 continuation line under-indented for visual indent
# H405 multi line docstring summary not separated with an empty line
# I202 Additional newline in a group of imports
# E731 do not assign a lambda expression, use a def
# W504 line break after binary operator
ignore = E126,E128,E731,I202,H405,N530,W504
builtins = _
exclude=.venv,.git,.tox,dist,doc,*lib/python*,*egg,build,tools,.tmp
# H106: Don't put vim configuration in source files
# H203: Use assertIs(Not)None to check for None
# H204: Use assert(Not)Equal to check for equality
# H205: Use assert(Greater|Less)(Equal) for comparison
# H904: Delay string interpolations at logging calls
enable-extensions=H106,H203,H204,H205,H904

[flake8:local-plugins]
extension =
  # Checks from neutron-lib
  N521 = neutron_lib.hacking.checks:use_jsonutils
  N524 = neutron_lib.hacking.checks:check_no_contextlib_nested
  N529 = neutron_lib.hacking.checks:no_mutable_default_args
  N532 = neutron_lib.hacking.translation_checks:check_log_warn_deprecated
  N534 = neutron_lib.hacking.translation_checks:check_raised_localized_exceptions
  N536 = neutron_lib.hacking.checks:assert_equal_none
  N537 = neutron_lib.hacking.translation_checks:no_translate_logs

[testenv:dev]
# run locally (not in the gate) using editable mode
# https://pip.pypa.io/en/stable/reference/pip_install/#editable-installs
# note that order is important to ensure dependencies don't override
commands =
    pip install -q -e "git+https://opendev.org/openstack/networking-bagpipe#egg=networking_bagpipe"
    pip install -q -e "git+https://opendev.org/openstack/neutron#egg=neutron"

[testenv:py3-dev]
commands =
    {[testenv:dev]commands}
    {[testenv]commands}

[testenv:pep8-dev]
deps =
    {[testenv:pep8]deps}
commands =
    {[testenv:dev]commands}
    {[testenv:pep8]commands}
